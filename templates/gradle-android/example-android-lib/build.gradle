apply plugin: 'com.android.library'

android {
    compileSdkVersion 21
    buildToolsVersion "21.1.2"

    lintOptions {
        abortOnError false
    }

    packagingOptions {
        exclude 'LICENSE.txt'
    }


    defaultConfig {
        minSdkVersion 9
        targetSdkVersion 21

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        manifestPlaceholders = [bar : "foobar"]
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

uploadArchives {

    repositories {
        mavenDeployer {

            beforeDeployment { MavenDeployment deployment ->
                signing.signPom(deployment)
            }

            snapshotRepository(url: RESP_SNAPSHOT_URL) {
                authentication(userName: RESP_SNAPSHOT_USERNAME, password: RESP_SNAPSHOT_PASSWORD)
            }
            repository(url: RESP_RELEASE_URL) {
                authentication(userName: RESP_RELEASE_USERNAME, password: RESP_RELEASE_PASSWORD)
            }

            pom.artifactId = POM_ARTIFACT_ID
            pom.groupId = POM_GROUP_ID
            pom.version = POM_VERSION

            pom.project {
                name POM_NAME
                description POM_DESCRIPTION
                packaging POM_PACKAGING
                inceptionYear POM_INCEPTION_YEAR

                licenses {
                    license {
                        name POM_LICENCE_NAME
                        url POM_LICENCE_URL
                        distribution POM_LICENCE_DIST
                    }
                }

                scm {
                    url POM_SCM_URL
                    connection POM_SCM_CONNECTION
                    developerConnection POM_SCM_DEV_CONNECTION
                }

                developers {
                    developer {
                        id POM_DEVELOPER_ID
                        name POM_DEVELOPER_NAME
                    }
                }
            }

        }
    }

}

android.libraryVariants.all { variant ->
    task("generate${variant.name}Javadoc", type: Javadoc) {
        description "Generates Javadoc for $variant.name."
        source = variant.javaCompile.source
        ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
        classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar)

        //android
        exclude "**/R.java"

        //other
        exclude '**/demo/**'

        ArrayList<File> doclavaPath = new ArrayList<File>()
        doclavaPath.add(file("libs/doclava.jar"))
        options.setDocletpath(doclavaPath)
        options.setDoclet("com.google.doclava.Doclava")
    }

    task("javadoc${variant.name}", type: Jar) {
        classifier = "javadoc"
        description "Bundles Javadoc into a JAR file for $variant.name."
        from tasks["generate${variant.name}Javadoc"]
    }

    task("jar${variant.name}", type: Jar) {
        description "Bundles compiled .class files into a JAR file for $variant.name."
        dependsOn variant.javaCompile
        from variant.javaCompile.destinationDir

        exclude '**/R.class', '**/R$*.class', '**/R.html', '**/R.*.html', 'BuildConfig.class'
        exclude '**/test/'
    }
}

task generateJavadoc(type: Javadoc) {
//    source = ['src', 'gen']
//    source =javaCompile.source
//    println source.

    println "start"

    destinationDir = new File("doc/javadoc")

    println destinationDir.getAbsolutePath()

    options.setEncoding("UTF-8")
    ArrayList<File> doclavaPath = new ArrayList<File>()
    doclavaPath.add(file("libs/doclava.jar"))
    options.setDocletpath(doclavaPath)
    options.setDoclet("com.google.doclava.Doclava")
    ArrayList<File> classPath = new ArrayList<File>()
    classPath.add(file("$System.env.ANDROID_HOME/platforms/android-21/android.jar"))
//    classPath.add(file("libs/android-support-v4.jar"))
    options.classpath(classPath)
//    options.showFromPrivate()
    options.bootClasspath(new File('$System.env.JAVA_HOME/jre/lib/rt.jar'))
    options.optionFiles(file('doc/javadoc.options'))
    doLast {
        println 'generating javadoc'
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:appcompat-v7:22.0.0'

    compile project(":example-java-lib")

    testCompile "junit:junit:4.10"
    testCompile "org.robolectric:robolectric:3.0"
    testCompile 'com.squareup.assertj:assertj-android:1.1.0'

    androidTestCompile 'com.squareup.assertj:assertj-android:1.1.0'

    androidTestCompile 'com.android.support.test:runner:0.3'
    androidTestCompile 'com.android.support.test:rules:0.3'
    androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2'

    androidTestCompile 'com.jayway.android.robotium:robotium-solo:5.4.1'

    testCompile 'org.powermock:powermock-module-junit4:1.6.2'
    testCompile "org.powermock:powermock-module-junit4-rule:1.6.2"
    testCompile 'org.powermock:powermock-api-mockito:1.6.2'
    testCompile "org.powermock:powermock-classloading-xstream:1.6.2"

    androidTestCompile 'org.mockito:mockito-core:1.9.5'
    androidTestCompile 'com.google.dexmaker:dexmaker:1.2'
    androidTestCompile 'com.google.dexmaker:dexmaker-mockito:1.2'
}


apply plugin: 'maven-publish'
publishing {
    publications {

        repositories.maven {
            url "http://127.0.0.1:8081/nexus/content/repositories/snapshots/"
            credentials {
                username "admin"
                password "admin123"
            }
        }

        maven(MavenPublication) {
            artifacts {
                groupId 'com.example'
                artifactId 'android-lib'
                version '1.0.1-SNAPSHOT'
                artifact 'build/outputs/aar/example-android-lib-release.aar'

//                from components.java
            }
        }
    }
    //snapshot only allow published version name contains snapshot

}

println VERSION_NAME


Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())
println properties.getProperty("x")