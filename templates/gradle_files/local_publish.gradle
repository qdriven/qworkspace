/*
 * Usage
 *
 * 1. Includes the following sentences in your build.gradle file.
 *
 * ext.localReleaseDest = "${buildDir}/release/${VERSION_NAME}"
 * apply from: '../local_publish.gradle'
 *
 * 2. Run
 *
 * gradle upload
 *
 */

apply plugin: 'maven'
apply plugin: 'signing'

def isReleaseBuild = !VERSION_NAME.endsWith('-SNAPSHOT')

task zipRelease(type: Zip) {
    from localReleaseDest
    destinationDir buildDir
    archiveName "release-${version}.zip"
}

task generateRelease << {
    println "Release ${version} can be found at ${localReleaseDest}/"
    println "Release ${version} zipped can be found ${buildDir}/release-${version}.zip"
}

generateRelease.dependsOn(uploadArchives)
generateRelease.dependsOn(zipRelease)


afterEvaluate { project ->
    uploadArchives {

        repositories {

            mavenDeployer {
                beforeDeployment {
                    MavenDeployment deployment -> signing.signPom(deployment)
                }

                repository(url: "file://${localReleaseDest}")

                pom.groupId = POM_GROUP_ID
                pom.artifactId = POM_ARTIFACT_ID
                pom.version = VERSION_NAME

                pom.project {
                    name POM_NAME
                    packaging POM_PACKAGING
                    description POM_DESCRIPTION
                    url POM_URL
                    inceptionYear POM_INCEPTION_YEAR

                    scm {
                        url POM_SCM_URL
                        connection POM_SCM_CONNECTION
                        developerConnection POM_SCM_DEV_CONNECTION
                    }

                    licenses {
                        license {
                            name POM_LICENCE_NAME
                            url POM_LICENCE_URL
                            distribution POM_LICENCE_DIST
                        }
                    }

                    developers {
                        developer {
                            id POM_DEVELOPER_ID
                            name POM_DEVELOPER_NAME
                        }
                    }
                }

            }
        }
    }

    signing {
        required { isReleaseBuild && gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }

}
