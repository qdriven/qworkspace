/*
 *  Usage
 *
 * 1. Includes the following sentences in your build.gradle file.
 * apply from: '../maven_publish.gradle'
 *
 * 2a. Publish to nexus
 * gradle -q upload
 *
 * 2b. Publish to maven
 * gradle -q -Penv=pro upload
 *
 * 2c. Publish to local
 * gradle -q -Penv=local upload
 */

apply plugin: 'maven'
apply plugin: 'signing'

def isReleaseBuild = !VERSION_NAME.endsWith('-SNAPSHOT')

ext.env = hasProperty("env") ? env : "dev"
ext.localSnapshotDest = "${buildDir}/snapshot/${VERSION_NAME}"
ext.localReleaseDest = "${buildDir}/release/${VERSION_NAME}"


def getReleaseRepositoryUrl() {
    if (env == "dev") return NEXUS_RELEASE_URL
    if (env == "pro")
        return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL
                : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
    return "file://${localReleaseDest}"
}

def getSnapshotRepositoryUrl() {
    if (env == "dev") return NEXUS_SNAPSHOT_URL
    if (env == "pro")
        return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL
                : "https://oss.sonatype.org/content/repositories/snapshots/"
    return "file://${localSnapshotDest}"
}

def getRepositoryUsername() {
    if (env == "dev") return NEXUS_USERNAME
    return hasProperty('SONATYPE_USERNAME') ? SONATYPE_USERNAME : ""
}

def getRepositoryPassword() {
    if (env == "dev") return NEXUS_PASSWORD
    return hasProperty('SONATYPE_PASSWORD') ? SONATYPE_PASSWORD : ""
}

afterEvaluate { project ->
    uploadArchives {

        repositories {

            mavenDeployer {
                beforeDeployment {
                    MavenDeployment deployment -> signing.signPom(deployment)
                }

                repository(url: getReleaseRepositoryUrl()) {
                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                }
                snapshotRepository(url: getSnapshotRepositoryUrl()) {
                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                }

                pom.groupId = POM_GROUP_ID
                pom.artifactId = POM_ARTIFACT_ID
                pom.version = VERSION_NAME

                pom.project {
                    name POM_NAME
                    packaging POM_PACKAGING
                    description POM_DESCRIPTION
                    url POM_URL
                    inceptionYear POM_INCEPTION_YEAR

                    scm {
                        url POM_SCM_URL
                        connection POM_SCM_CONNECTION
                        developerConnection POM_SCM_DEV_CONNECTION
                    }

                    licenses {
                        license {
                            name POM_LICENCE_NAME
                            url POM_LICENCE_URL
                            distribution POM_LICENCE_DIST
                        }
                    }

                    developers {
                        developer {
                            id POM_DEVELOPER_ID
                            name POM_DEVELOPER_NAME
                        }
                    }
                }

            }
        }
    }

    signing {
        required { isReleaseBuild && gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }

}
